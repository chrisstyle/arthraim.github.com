<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artoirus]]></title>
  <link href="http://artori.us/atom.xml" rel="self"/>
  <link href="http://artori.us/"/>
  <updated>2012-12-12T09:17:24+08:00</updated>
  <id>http://artori.us/</id>
  <author>
    <name><![CDATA[Arthur Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xcode优化过的PNG]]></title>
    <link href="http://artori.us/optimized-png-in-xcode/"/>
    <updated>2012-12-12T00:07:00+08:00</updated>
    <id>http://artori.us/optimized-png-in-xcode</id>
    <content type="html"><![CDATA[<p>开始做iOS应用就有一个“公理”，<strong>图片素材要使用png格式</strong>，至于公理是怎么形成的完全不知道，只是听说在官方文档里提到过一句：苹果会对png进行优化。</p>

<p>为什么优化？谁优化的？什么时候优化的？怎么优化的？</p>

<p>和所有的魔术一样，说穿了就不好玩了。一切的根源是iPhone的显存。iPhone的vRAM在存放单个像素的颜色的时候，并不是按照传统的“红-绿-蓝”这样的顺序排列的，而是“蓝-绿-红”，即我们常说的RGB，在iPhone的显存里是BGR。并且，没有alpha通道。</p>

<p>另一边，png格式按照“红-绿-蓝”的顺序描述颜色，并且支持alpha通道的半透明，RGBA四个通道各占1个字节。</p>

<ul>
<li>为什么优化？
因为一边RGB一边BGR，一边有alpha一边没有alpha。</li>
<li>谁优化的？
文章标题已经剧透了，Xcode优化的。</li>
<li>什么时候优化的？
Xcode在编译时，会对png资源进行优化。</li>
<li>怎么优化的？
优化做了两件事：

<ol>
<li>把png里所有的RGB颜色转成BGR顺序</li>
<li>把png里所有的alpha通道先和RGB三通道先乘好（比如R:1 G:1 B:1 A:0.5的颜色直接转成 R:0.5 G:0.5 B:0.5）</li>
</ol>
</li>
</ul>


<p>这样最终设备在运行时渲染这些颜色的时候，不需要任何处理，一个汇编语句就把数据丢尽显存里了。</p>

<p>PS: <a href="http://developer.apple.com/library/ios/#qa/qa1681/_index.html">这里</a>还有一个手动转换，和还原的办法</p>

<p>via: <a href="http://iphonedevelopment.blogspot.jp/2008/10/iphone-optimized-pngs.html">http://iphonedevelopment.blogspot.jp/2008/10/iphone-optimized-pngs.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[从wordpress搬到octopress]]></title>
    <link href="http://artori.us/migrated-from-wordpress-to-octopress/"/>
    <updated>2012-12-11T23:12:00+08:00</updated>
    <id>http://artori.us/migrated-from-wordpress-to-octopress</id>
    <content type="html"><![CDATA[<p>断断续续把wordpress转换到octopress上了。这是z-blog转到wordpress之后第二次更换博客系统了，octopress很酷，markdown的数据复用、搬家、存档都比lamp的wordpress轻便的多。</p>

<p>从导出wordpress数据库，转换为markdown，部署到github，搬图片文件，转换评论，磨磨蹭蹭的前前后后大约拖延了有两周，到今天终于把域名解析给换到这里来了。</p>

<p>最头疼的是转换文章的脚本不见得可靠，老文章的格式乱七八糟需要一篇一篇手动去修正，我现在做了一半，至少保证最新的大约3/5的文章是修改过的友好的格式。</p>

<p>很久没有更新博客，evernote的博客素材已经攒了一大堆，有空一篇一篇写出来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012欧洲杯Google,iCal,Outlook日历]]></title>
    <link href="http://artori.us/euro-2012-google-calendar-or-outlook-calendar/"/>
    <updated>2012-06-08T23:10:57+08:00</updated>
    <id>http://artori.us/euro-2012-google-calendar-or-outlook-calendar</id>
    <content type="html"><![CDATA[<p>今晚欧洲杯就开打了。在Live Calendar里导入了这个日历之后，同步到Windows Phone上很爽。</p>

<ol>
<li><p>在Google Calendar订阅好友的日历：euro2012calendar@gmail.com</p></li>
<li><p>直接访问<a href="https://www.google.com/calendar/embed?src=euro2012calendar%40gmail.com&amp;ctz=America/Denver">这个地址</a>，在最下面添加到Google Calendar</p></li>
<li><p>下载<a href="https://www.google.com/calendar/ical/euro2012calendar%40gmail.com/public/basic.ics">这个ics文件</a>导入到outlook, live calendar或iCal、iPhone等</p></li>
</ol>


<p><a href="http://artori.us/euro-2012-google-calendar-or-outlook-calendar/screen-shot-2012-06-08-at-3-08-39-pm/"><img src="http://artori.us/images/uploads/wp/Screen-Shot-2012-06-08-at-3.08.39-PM-500x298.png" alt="" /></a></p>

<p>原文地址：<a href="http://www.eurojoe.com/2012/06/01/euro-2012-google-calendar/">http://www.eurojoe.com/2012/06/01/euro-2012-google-calendar/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git修剪分支]]></title>
    <link href="http://artori.us/git-prune-branch/"/>
    <updated>2012-03-02T08:07:32+08:00</updated>
    <id>http://artori.us/git-prune-branch</id>
    <content type="html"><![CDATA[<p>项目运转的久了，很多个人的战略的bugfix的feature的分支一堆一堆，今天忍不住想清理一些已经被合并的分支。这里用到了几个相关的git命令。</p>

<ul>
<li><p><code>git branch</code> 可以查看本地有的分支，当前分支之前有个*。</p></li>
<li><p><code>git branch -r</code> 查看所有远程的分支（不代表远程还有的分支）</p></li>
<li><p><code>git branch -a --color</code> 查看所有分支（<code>--color</code>加颜色，绿色是tracking的）</p></li>
<li><p><code>git branch -d TAG</code> 删除本地分支，如果这个分支有没有合并的提交，git会提示你改用 <code>-D</code> 强制删除（或干脆别删除！）</p></li>
<li><p><code>git push REMOTE :TAG</code> 删除远程REMOTE（比如一般叫origin）分支，注意分支名前加冒号</p></li>
<li><p><code>git remote prune REMOTE</code> 这个指令比较特殊，如果你在A仓库上<code>git fetch</code>过，在B仓库用上一条命令删除了远程分支，那么A仓库里 <code>git branch -r</code> 还是可以看到已经删掉的分支。这个时候可以用这个命令修剪这些分支。</p></li>
<li><p><code>git prune</code> 在本地也可以使用，不过作用我还真不清楚，官方用推荐用 <code>git gc</code></p></li>
</ul>


<p>记录下，git真的很萌的你们不要黑他。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS 10.7.3用xcode提交二进制文件验证失败]]></title>
    <link href="http://artori.us/mac-os-10-7-3-breaks-xcode-binary-validation/"/>
    <updated>2012-02-13T04:27:59+08:00</updated>
    <id>http://artori.us/mac-os-10-7-3-breaks-xcode-binary-validation</id>
    <content type="html"><![CDATA[<p>近日在提交一个app的时候发生了奇怪的错误。错误如下：</p>

<p><a href="http://artori.us/mac-os-10-7-3-breaks-xcode-binary-validation/icon-dimensions-dont-meet-the-size-requirements/"><img src="http://artori.us/images/uploads/wp/icon-dimensions-dont-meet-the-size-requirements.png" alt="" /></a></p>

<blockquote><p>iPhone/iPod Touch: Icon.png: icon dimensions (0 x 0) don&#8217;t meet the size requirements. The icon file must be 57x57 pixels, in .png format</p></blockquote>

<p>我使用的Xcode版本是4.2.1，其实一下子也懵了完全没头绪。我第一时间当然是以为我的Icon.png真的出问题了，因为偶尔我会自己用一个叫做prepo的app来把512的图标转成57像素的，所以我第一时间以为是它的问题。（因为它之前也把比如10k的blabla@2x.png转成了20k的blabla.png）。于是我用Photoshop重新转换了一个图标来试图解决这个错误，结果当然是失败了。</p>

<p>各种Google之后，问题被锁定到了Mac OS 10.7.3这个升级包上，升级了之后是第一次提交二进制文件。<a href="https://devforums.apple.com/message/611733">这个讨论</a>都已经说明了病灶在哪里。</p>

<p>Xcode提交当然还是存在问题，无法通过验证，而且暂时没法解决。但是办法还是有，使用更加原始的Application Loader来上传。于是我打开Application Loader并登陆之后问题又出现了。</p>

<p><a href="http://artori.us/mac-os-10-7-3-breaks-xcode-binary-validation/screen-shot-2012-02-10-at-12-16-13-pm/"><img src="http://artori.us/images/uploads/wp/Screen-Shot-2012-02-10-at-12.16.13-PM.png" alt="" /></a></p>

<p>嗯，自带的版本看来太老了。于是各种Google之后<a href="https://itunesconnect.apple.com/apploader/ApplicationLoader_2.5.1.dmg">新的版本</a>终于还是找到了。使用方法很简单，跟着向导一步一步做（前提是itunes connect上的应用已经waiting for upload状态）直到需要在硬盘选择文件。首先在Xcode里Product -> Build for -> Building for archiving。然后Xcode工程下Products目录，有个 工程名.app，右键Show in finder，在它的上一级目录里找到release版本的app。当然上传前要把它打包成zip文件，application loader不能指定.app。最后完成向导，文件终于上传成功鸟 -。- 然后可以等着review了。</p>

<p><strong>更新：</strong>好吧看到了新说法是只要装好Application Loader 2.5.1，重启xcode，clean工程，重新archive，然后就能通过验证了，不需要真的使用Application Loader上传。 没试过，不一定管用，可以试试看。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[停用arthraim.cn域名]]></title>
    <link href="http://artori.us/abandon-arthraim-cn/"/>
    <updated>2012-01-06T22:52:15+08:00</updated>
    <id>http://artori.us/abandon-arthraim-cn</id>
    <content type="html"><![CDATA[<p>arthraim.cn的域名又到期了，因为之前的代理被卖到别的地方了所以很烦躁这个域名不要了.cn域名也实在是操蛋的可以。</p>

<p>之前留着也只是为了做一个重定向，现在重定向了一年了搜索引擎什么的也应该反应过来了，所以就不要了吧。</p>

<p>再见arthraim.cn</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arthur的2011年总结]]></title>
    <link href="http://artori.us/arthur-s-2011-summary/"/>
    <updated>2012-01-01T07:07:29+08:00</updated>
    <id>http://artori.us/arthur-s-2011-summary</id>
    <content type="html"><![CDATA[<p>还有一个小时2011年就过完了，末日年就在眼前。今年博客更新的非常少，当然我没有偷懒，公司从年底上马了新的产品之后我就全身心的投入到了新的工作里去了。</p>

<p>爱折客从去年年底开始慢慢开发到现在整一年，发展迅速，今天年终总结的时候说实话我也觉得很振奋，虽然始终我的兴趣点在social上而爱折客虽然有点像solomo，但是其实是没有social的成分的，所以我承认我并不是那么&#8221;爱&#8221;它。但是到了这个时候看着这个产品我觉得很自豪，我们是一群踏踏实实的童鞋们，没有开复老师呼风唤雨的本事，勤勤恳恳的做业绩，可能并不是很多人看到我们的成绩，但是我们很棒。</p>

<p>技术上，算是真正独立完成了一个web的客户端，初期也并没有存储全部和后面的api交互，后来做着做着后台越做越大mongodb越做越熟。另外转型iOS开发才是这一年真正拼了老命的事情，要感谢公司给我配了台iMac坦率说是动力的源泉，很有压力但是的确是动力。现在自豪的说app store上已经有5个app出自我手啦。因为要偶尔维护api，所以虽然没有系统的学不过接触了ruby on rails，很有魅力！</p>

<p>依然看了很多电影，没有去年多当然。依然看了很少书。动画几乎没看，剧集也是有一集没一集的追。在游戏上花的钱更多了，因为今年掌机换代了，入手了PSVita，也算是5年一次的大开销吧。</p>

<p>希望明年公司蒸蒸日上，希望自己大大进步。2012我来了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows Phone版微博通]]></title>
    <link href="http://artori.us/windows-phone-wbt/"/>
    <updated>2011-12-12T00:53:41+08:00</updated>
    <id>http://artori.us/windows-phone-wbt</id>
    <content type="html"><![CDATA[<p>很久没有写博客了，已经有友联的童鞋抱怨了，最近这段时间很忙，几乎下班就没心情做自己的事情了。话说最近入手了一台WP7，三星focus，白菜价，手机丢了所以来不及等Nokia Lumia 800了，很急就入手了。话说这不是重点，我手痒然后卸掉了WP7sdk的beta2，装上了新的7.1，小玩了一下。</p>

<p>话说其实给WP7写应用还真的蛮好玩的，事实上marketplace实际上也比我想象的要热闹一点，所以还蛮有动力写点东西的，最近在公司写iOS的app，每天都是objective-c，捡起了以前的C#真是一下子觉得好厉害，一个天一个地啊，终于不用自己retain, release了。</p>

<p>对了写了两段还是没有说到重点，因为重点就一句话，在熟悉WP7的开发，所以写了个微博通的客户端，好吧只是调用api发个post的请求而已很简单，主要是自己熟悉一下。</p>

<p>对了东西已经开源了在<a href="https://github.com/Arthraim/WbtoMongo">这里</a></p>

<p>那写到这里就写完了。感叹一下，visual studio真的不错，现在.net的包管理也很方便！现在dotnet我已经算是局外人了，所以不嘴贫了 -。-</p>

<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby好可怕]]></title>
    <link href="http://artori.us/ruby-is-horribl/"/>
    <updated>2011-09-11T20:40:56+08:00</updated>
    <id>http://artori.us/ruby-is-horribl</id>
    <content type="html"><![CDATA[<p>接触ruby时间不长，用的机会就更少了，所以偶尔用一下的时候难免还要去翻翻文档什么的。维护某个后台的时候，有个随机输出的需求，所以我写了下面这样一段代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="n">ver</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:version</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span> <span class="p">?</span> <span class="s1">&#39;i&#39;</span> <span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:version</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@preview_items</span> <span class="o">=</span> <span class="no">MyItem</span><span class="o">.</span><span class="n">where</span><span class="p">({</span><span class="ss">:version</span> <span class="o">=&gt;</span> <span class="n">ver</span><span class="p">,</span> <span class="ss">:order</span><span class="o">.</span><span class="n">gt</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">})</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="o">[</span><span class="ss">:order</span><span class="p">,</span> <span class="ss">:desc</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">map</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="vi">@preview_items</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>    <span class="n">order</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="s1">&#39;order&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">map</span><span class="o">[</span><span class="n">order</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="k">if</span> <span class="n">map</span><span class="o">[</span><span class="n">order</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">map</span><span class="o">[</span><span class="n">order</span><span class="o">].</span><span class="n">push</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@json_items</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">map</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">key</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">arr</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="vi">@json_items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@json_items</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">arr</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">arr</span><span class="o">.</span><span class="n">count</span><span class="p">)</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@json_items</span><span class="p">,</span> <span class="n">callback</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:callback</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>rails某个模型的index页面，具体做了什么呢？大概是四件事情：</p>

<ol>
<li><p>取参数version</p></li>
<li><p>在数据库查询该version并且order字段大于0的数据，根据order字段倒叙排列（数据库是mongodb，driver用mongoid）</p></li>
<li><p>遍历查询的结果建立一张以order为key，相应order的实体数组为value的表</p></li>
<li><p>遍历3中的表，每个order的数组中随机抽取一个元素作为这个order的唯一值</p></li>
</ol>


<p>最后把获取的新数据render。</p>

<p>看起来很满足什么的，就提交代码了。之后同事部署前，看了看这里的更新，然后最终把代码完全改掉了。只用了一行 =。=</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@json_items</span> <span class="o">=</span> <span class="no">MyItem</span><span class="o">.</span><span class="n">where</span><span class="p">({</span><span class="ss">:version</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:version</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;i&#39;</span><span class="p">,</span> <span class="ss">:order</span><span class="o">.</span><span class="n">gt</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">})</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="o">[</span><span class="ss">:order</span><span class="p">,</span> <span class="ss">:desc</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:order</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">sample</span><span class="p">}</span>
</span><span class='line'>  <span class="n">render</span> <span class="n">json</span><span class="p">:</span> <span class="vi">@json_items</span><span class="p">,</span> <span class="n">callback</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:callback</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>做的事情是完全一样的。</p>

<ol>
<li><p>他先看了取参数，不用三元，直接 || 一个默认值</p></li>
<li><p>然后他把第4步中的取随机的部分改了，因为数组中随机取一个元素，ruby直接有sample方法</p></li>
<li><p>然后他又觉得第四步可以更简单的调用hash的map方法，映射成另一个value = value.sample的map</p></li>
<li><p>最后他吃了顿中饭回来灵光一闪，终于发现第三步做的就是一个group_by的事情，ruby可以做这个事情</p></li>
</ol>


<p>于是，除了查询不变，所有的逻辑全部调用了ruby现成的方法完成了！哥落伍了…… 越发觉得ruby好强大。</p>

<p>BTW，帮我改代码的是@niedhui</p>

<p>以上……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NoMethodError: undefined method `specifications' ...]]></title>
    <link href="http://artori.us/nomethoderror-undefined-method-specifications/"/>
    <updated>2011-07-21T05:11:17+08:00</updated>
    <id>http://artori.us/nomethoderror-undefined-method-specifications</id>
    <content type="html"><![CDATA[<p>今天在和同事说，我最喜欢写这样的文章了，很多人会碰到的异常，而且没有什么中文资料，可以给搜索引擎个好排名（喂你心机好重。好吧其实我的想法很伟大的哦，我是给以后会遇到一样问题的你造福哦~</p>

<p>重新搭新环境，先装了rvm，然后装上gem，用gem装了rails。之后呢问题就出来，尝试用bundle exec rake db:seeds的时候会出错，加上&#8211;track参数一看大概是这样子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>undefined method `specifications' for "/Users/arthraim/.rvm/gems/ruby-1.9.2-p290":String</span></code></pre></td></tr></table></div></figure>


<p>好像后面也不是特别重要了，只是这个问题比较费解，之前同事好像也遇到过。去Google了一下，居然是gem版本太高的关系，要把gem降级到早一些的版本。不想深究下去了，就说一下解决的办法好了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem update --system 1.7.2</span></code></pre></td></tr></table></div></figure>


<p>之前我的版本是1.8.5，虽然不知道具体什么情况，不过1.7.2就可以了。话说gem update到老版本的方法好神奇 -。-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyGems升级造成yaml parse错误]]></title>
    <link href="http://artori.us/the-update-of-rubygems-causes-yaml-parsing-problem/"/>
    <updated>2011-06-29T11:10:44+08:00</updated>
    <id>http://artori.us/the-update-of-rubygems-causes-yaml-parsing-problem</id>
    <content type="html"><![CDATA[<p>遇到个很蛋疼的问题，mongoid的配置文件（一个YAML）文件引发了下面这个错误：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db_name must be a string or symbol
</span><span class='line'>...MONGOID_PATH/lib/mongo/util/support.rb:50:in `validate_db_name'</span></code></pre></td></tr></table></div></figure>


<p>Google到<a href="http://cstrahan.com/2011/05/14/mongoid-yaml-rails-conflict.html">这里</a>，知道原因是RubyGem v1.5.0开始把默认的yaml parser从syck改成了psych。</p>

<p>解决方法一当然是改你的yaml让它可以被parse，如果需要使用之前的parser，那要在config/environment.rb中加上以下两行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'yaml'
</span><span class='line'>YAML::ENGINE.yamler= 'syck'</span></code></pre></td></tr></table></div></figure>


<p>话说这好像是第一次写ruby/rails的文章，刚刚玩了两三个星期~</p>

<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[三大游戏主机厂商2011年E3展前发布会]]></title>
    <link href="http://artori.us/2011-e3-press-conferences/"/>
    <updated>2011-06-08T09:38:41+08:00</updated>
    <id>http://artori.us/2011-e3-press-conferences</id>
    <content type="html"><![CDATA[<p>在北京时间昨天0点30分，今天昨天上8点和今天凌晨0点，微软、索尼、任天堂三大游戏主机厂商的E3展前发布会依次召开。集结第一方第三方各种游戏阵容及对硬件平台的更新换代，三大厂商都给今年E3注入了一针兴奋剂，注定是一个同样不平凡的E3将要开始。</p>

<p>微软的展前发布会是最平淡的，大量的KINECT游戏介绍、XBOX LIVE的各种升级，以及其他CU（core user核心玩家）的软件，但是惟独缺少了新的硬件，无论是新外设还是X720，更别说微软掌机，一样都没有出现。唯一的亮点就是压轴的HALO4，这也是唯一让我骂娘的牛B消息。</p>

<p><a href="http://artori.us/2011-e3-press-conferences/2011_e3_microsoft/"><img src="http://artori.us/images/uploads/wp/2011_e3_microsoft-500x281.jpg" alt="" /></a></p>

<p>索尼的展前发布会之前，NGP已经在各种场合出现过了，伴随着PSN故障的道歉，各种软件的介绍，等到平井一夫上台的时候，大家知道今年的重头戏来了 &#8212;- NGP。和之前传闻一样，NGP的真名的确是Playstation Vita（生命）。当然PSV的硬件规格早就不是秘密，不过发售计划和价格才是人们关注的焦点，接近PS3技能的掌机，几乎应该是不敢想象的昂贵。不过事实证明索尼赢了，&#8221;业界最后的良心&#8221;是大家的评论，PSV售价24800日元（249.9美元），哪怕是3DS也要25000日元，索尼这个价格实在是太震撼了！</p>

<p>另外索尼公布的3D电视利用LL/RR的眼镜原理可以让两名玩家看到完全不同的画面，这样一来夫妻两个盯着同一个屏幕一个看电视一个玩游戏的梦想不远了！唯一的遗憾是两个人都要带着有色眼镜看电视了。</p>

<p><a href="http://artori.us/2011-e3-press-conferences/2011_e3_sony/"><img src="http://artori.us/images/uploads/wp/2011_e3_sony-500x280.jpg" alt="" /></a></p>

<p>十来分钟前结束的任天堂展前发布会应该是最精彩的，在展前沸沸扬扬的project cafe新主机，以及后来爆出来的控制器上会有6寸液晶屏，这下都真相大白了。任氏一样用第一方的软件砸，然后第三方的阵容也的确是牛X。最震撼的是在发布会的最后一项，大肆介绍了新一代的主机WiiU。正是之前的控制器。但是这个东西很神奇，虽然猩猩和岩田聪都称之为：new controller。但EA和其他第三方纷纷称其：new platform, new console或new system。究竟只是一个wii的控制器还是一台新的家用机掌机合体，大家都应该明白了，毕竟wii是不支持HD的，其实project cafe的主机和控制器之和就是今天的wiiU，可不是只有一个控制器而已哦~</p>

<p><a href="http://artori.us/2011-e3-press-conferences/2011_e3_nintendo/"><img src="http://artori.us/images/uploads/wp/2011_e3_nintendo-500x281.png" alt="" /></a></p>

<p>E3每天都在恢复往日的气息，伴随着3DS/KINECT甚至NGP/WIIU的出现，E3也真的回来了，复苏了。势必明年的E3会有PS4 X720甚至WII2的出现，让我们好好欣赏今年的E3，并期待它有更大的发展吧~</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java语言oauth库scribe-java支持新浪微博]]></title>
    <link href="http://artori.us/java-oauth-lib-scribe-java-start-supporting-weibo/"/>
    <updated>2011-06-04T07:41:22+08:00</updated>
    <id>http://artori.us/java-oauth-lib-scribe-java-start-supporting-weibo</id>
    <content type="html"><![CDATA[<p>好吧这是一篇蛋疼的文章, 因为本人第一次成功pull request所以比较鸡冻. <a href="https://github.com/fernandezpablo85/scribe-java">scribe-java</a>是一个java语言的oauth库, 代码很干净利落很容易扩展而且用起来很方便. 因为<a href="http://artori.us/something-about-oauth/">之前文章</a>提到过的工作, 所以对scribe-java做了<a href="https://github.com/Arthraim/scribe-java">一些改造</a>.</p>

<p>事实上很多改造是因为scribe-java的确还存在一些问题, 比如oauth参数不支持querystring等, 所以改造工作不可避免. 不过随着作者非常快速的更新, 现在它已经大大改善了这些方面的功能. 回过头来再看自己的folk, 事实上也完全没有必要了.</p>

<p>当然很希望国内的开发者在pom.xml里写上scribe-java就可以直接支持国内的各个微博, 所以我整理了一下我的分支正式的发起了pull request. 经过几次交流, 最终 新浪微博 / 网易微博 / 搜狐微博 的相关支持已经正式纳入了原作者的版本中得到支持了. 另外我一起提出请求的QQ微博和人人2.0最终因为代码的修改太大, 作者没有采纳(如果你要使用, 可以下载<a href="https://github.com/Arthraim/scribe-java">我的folk</a>.</p>

<p>具体用法欢迎参考<a href="https://github.com/fernandezpablo85/scribe-java/blob/master/src/test/java/org/scribe/examples/SinaWeiboExample.java">这个例子</a> :) 开源是个尝到甜头就像继续下去的工作, 哪怕你的贡献再渺小, 也非常的美好. 让我鸡冻的感谢一下原作者Pablo Fernandez, 来自阿根廷.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bottle-非常喜欢这个框架]]></title>
    <link href="http://artori.us/bottle-i-love-this-framework/"/>
    <updated>2011-05-30T04:46:07+08:00</updated>
    <id>http://artori.us/bottle-i-love-this-framework</id>
    <content type="html"><![CDATA[<p>大概是我火星了，直到2天前我才知道有bottle这样一个框架。鉴于对自己的翻译能力没有什么信心，就摘抄<a href="http://bottlepy.org">bottle官网</a>上对自己介绍的原文过来吧。</p>

<blockquote><p>Bottle is a fast, simple and lightweight WSGI micro web-framework for Python. It is distributed as a single file module and has no dependencies other than the Python Standard Library.</p></blockquote>

<p>坦率说因为工作中是使用spring的缘故，其实真正用python的web框架机会并不多。相对接触的比较多的是django，无论是工作中还是生活中写点小东西的时候我还是比较愿意使用django，django+mongoengine，可以快速的使用mongodb来做存储，具体就不细说了这不是重点，<a href="http://artori.us/use-mongodb-with-django/">之前的文章</a>中提到过。至于pylons, web.py或者其他的，大概看了一眼文档就没啥特别的感觉就没有深究下去。</p>

<p><a href="http://artori.us/bottle-i-love-this-framework/logo_nav/"><img src="http://artori.us/images/uploads/wp/logo_nav.png" alt="" /></a></p>

<p>今天主角是bottle，早上醒来迷迷糊糊在reader上看了<a href="http://simple-is-better.com/news/detail-292">一个充满印度腔的视频</a>，讲用bottle框架5分钟创建一个wiki。就是这个视频让我对bottle一见钟情。可以看一下官网的helloworld</p>

<p><a href="http://artori.us/bottle-i-love-this-framework/2011-05-29_bottle_hello_world/"><img src="http://artori.us/images/uploads/wp/2011-05-29_bottle_hello_world.png" alt="" /></a></p>

<p>好像做一个restful的东西好轻松的样子，直到我花了2个小时认真的读了他的<a href="http://bottlepy.org/docs/dev/tutorial.html">这一页</a>文档，我才觉得这真的太棒了！搭建一个web应用真的是手到擒来鸟。dict直接输出为json，multipart上传文件直接从request.files里面读取，cookie以及加密的cookie等等偷懒的feature真是不少。</p>

<p>内建的template相对要蛋疼一点，我都没有找到loop，不过支持mako很简单，和内建的用法几乎是一模一样的。</p>

<p>各种给力不多说了，现在自己在写一个用bottle+mongo的应用玩，另外学习的时候写了<a href="https://gist.github.com/994641">一个例子</a>，也传到了github上，愿意的话可以看看，里面有很多让人高兴的地方。如果你和我一样有做一个web应用的冲动，不妨试试看bottle！</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[随便写写oauth]]></title>
    <link href="http://artori.us/something-about-oauth/"/>
    <updated>2011-04-08T04:12:47+08:00</updated>
    <id>http://artori.us/something-about-oauth</id>
    <content type="html"><![CDATA[<p>最近用到了其他微博的oauth, 起初觉得oauth很烦, 因为文档看了很久很久都没有弄明白怎么回事. 等到初步模到了一些门道之后, 发现其实挺简单的, 因为那是一个标准, 理论上只要支持oauth的网站用一套代码去跑基本上都可以通过. 不过在实际的应用当中我算是领教到了中国互联网的强悍之处. 已经不记得是在什么地方看到一篇文章, 作者一上来第一句话就是 &#8220;从oauth可以看出一个互联网企业的技术力&#8221;, 虽然稍微有些偏激, 但多多少少有值得认同的地方.</p>

<p><strong>我了解的oauth</strong></p>

<p>oauth其实是个认证, 就和HTTP的basic auth一样, 通过认证才能访问HTTP的资源. 之所以需要oauth, 只是为了解决一个问题:&#8221;第三方不获得用户第一方的密码的前提下访问第一方的资源&#8221;, 所以保障用户通信过程中密码不被泄露是其次, 关键更重要的是第三方不会获得用户名和密码.</p>

<p>于是强大的地方就这样显现出来了, 不知道大家有没有看到过新浪微博的xauth, 什么是xauth呢? 我没有去考据究竟xauth是谁的创造, 它几乎搬了大部分oauth的内容, 不过解决了一个什么问题呢? 解决了一个 &#8220;oauth认证必须跳转到第一方去输入密码&#8221; 的问题(美其名曰提升用户体验). 对不起我凌乱了, 第三方是可以得到用户密码的, 那它是不是直接把oauth的第一大feature给OOXX掉了 - - 那basic auth不能满足你么大哥?</p>

<p><strong>各大网站的oauth</strong></p>

<p>因为工作和兴趣双重因素所致(这真是个难得一遇的好事情), 我接触了各个门户的oauth, 首先有个前提就是我用了oauth.net上罗列的某个java的oauth库, 饱受挫折, 经过几周的积累, 我才决定写下这篇文章, 多多少少对后来者有所提示和帮助.</p>

<p><strong>新浪微博</strong></p>

<p>把新浪放在第一家只是因为我第一个做的是新浪微博的oauth, 一上来使用了一个库叫做<a href="http://code.google.com/p/oauth-signpost/">oauth-signpost</a>, 看上去挺不错的样子, 尝试了一下它对Google等国外网站的例子, 我觉得可以用, 于是开始写. 之后马上就遇到了问题, 在申请request_token的过程中, 服务器会返回一个oauth_callback_confirmed的参数, 这个是明确写在oauth 1.0标准中的 (原先的1.0a, 如今已正式merge到了1.0中, 感兴趣的话<a href="http://www.skiyo.cn/2010/08/23/oauth-1-0a-and-1-0/">这里</a>有一篇资料描述了1.0a和早期1.0的差异), 是必须有的, 可是如果你是通过POST方法请求, 那么很抱歉新浪微博是没有提供的. 这显然是一个疏漏. 在新浪微博官方论坛里, 这个问题不止一次的被提到(看<a href="http://forum.open.t.sina.com.cn/read.php?tid=1838">这里</a>, 看<a href="http://forum.open.t.sina.com.cn/read.php?tid=912&amp;ordertype=desc">这里</a>,), 虽然说是 &#8220;近期会加上&#8221; 不过感觉新浪要改应该不会那么敏捷, 所以能做的只有耐心等待和回避这个问题. (虽然不影响正常功能, 不过毕竟人家是标准, signpost就是属于那种按照标准来结果在新浪出错了的牺牲品)</p>

<p>为了回避这个问题, 我改用了<a href="https://github.com/fernandezpablo85/scribe-java">scribe-java</a>这个库. 不过在做新浪微博的时候发现的问题, 好像只有这一个.</p>

<p><strong>网易微博</strong></p>

<p>网易是在我快速尝试了搜狐/豆瓣/腾讯之后成功完成的第二个, 事实上很幸运, 基本上不用改太多的代码就完成了网易的功能. 虽然这样, 并不表示网易就按照标准来, 首先我发现的明显的一个不按照标准的地方是authorization步骤, 它提供了两个接口, 一个是/oauth/authorize, 一个是/oauth/authenticate, 首先我先申明这两个单词我一直搞不清, 不过在网易给oauth的分工中, 它们的工程师是这么定义的: authorize不处理callback, 直接展示verifier的页面; 另一个, authenticate则处理callback. (至于给第二个传oob会怎么样, 有没有返回oauth_callback_confirmed, 我都没有细看了)</p>

<p>另外小提一下, 它在回调你的callback地址的时候, 传的参数名是oauth_token, 不过相信我, 我觉得那是oauth_verifier.</p>

<p><strong>腾讯微博</strong></p>

<p>对腾讯微博(QQ微博)的尝试其实在网易之前, 不过才看了文档我就挂掉了, 因为它不支持header传递oauth参数, 只支持querystring, 虽然的确在oauth协议中写出可以使用querystring, 不过我觉得header比较帅气可不可以啊, 而且我的库不支持querystring啊企鹅大哥 - -</p>

<p>大问题放前面, 后面还有小问题呢. 在请求request_token时传递oauth_callback参数, 因为写测试没用到callback, 所以肯定库会帮我填上oob(out-of-bound), 不过让我很崩溃的是企鹅大爷不高兴了, 给我跳转到了一个这样一个地方: https://open.t.qq.com/oauth_html/oob?oauth_token=xxxxx&amp;oauth_verifier=xxxxxx, 这当然是NOT FOUND, 这是企鹅大哥的地盘, 我不能做主啊.</p>

<p>千辛万苦查到了企鹅大哥的文档里写了这么一句话: <strong>① 用户授权后web应用将会重定向到oauth_callback。当应用为pc客户端或手机客户端应用时，没有回调url(oauth_callback)的概念，此时设置为字符串null即可。字符串&#8221;null&#8221;必须是小写。</strong>爹啊&#8230; 你是我亲爹啊. 不按套路出牌的啊! (<a href="http://open.t.qq.com/bbs/viewthread.php?tid=2352">愤怒的同学</a>显然不止我一个, 而且没人理他)</p>

<p>对了, 今天还发现腾讯微博开发平台的文档修改过了, 不过&#8230;&#8230;&#8230;&#8230;.. 被修改的似乎只有文档而已.</p>

<p><strong>搜狐微博</strong></p>

<p>申请搜狐博客应用的时候填写了一个callback, 不知道是干吗的. 另外看了一些人写的东西, 说搜狐不让传realm. 我用之前的代码跑了一下, 结果报错说signature_invalid, 我想这东西估计不靠谱就先放下去做网易微博了. 今天下午回过头来去再摸了摸搜狐微博, 想不到一下子就跑通了, 可喜可贺, 不知道是不是它最近几天有更新, 还是我第一次的尝试实在太潦草以至于自己出错了错怪了搜狐. 不过搜狐微博的开发文档写的真不怎么样, 相比起来前三家好多了.</p>

<p>还有一个问题是搜狐不理会我的oauth_callback, 除非在authorize的时候传(querystring, 和oauth_token一起传), 不过这应该是oauth 1.0a就改掉的地方, 搜狐大概是没有跟上?</p>

<p><strong>豆瓣</strong></p>

<p>你们知道, 作为一个程序员, 对豆瓣的崇拜之情是难以言表的. 豆瓣的高性能, 以及豆瓣为开源做出的各种贡献都是围城外面的程序员羡慕不已的, 并且把 &#8220;指环王&#8221; 当作文化的豆瓣团队也给我留下了足够美好的印象. 熟悉python的朋友不会不知道simple is better than complex这句话, 用python开发的豆瓣无论如何都让我觉得是simple的典范. 无论如何, 我始终觉得豆瓣是一个技术很棒的企业. 这一切美好的印象只持续到我接触它的oauth之前.</p>

<p>还是先说有点, 豆瓣的oauth文档简介明了, 该说的都说清楚了. 另外豆瓣的错误信息返回的很厚道, 会把服务器拼出来的base string发给你, 让你和自己的好好比较一下, signature错误找起来就方便多了.</p>

<p>不过signature的错误你是永远也不会觉得好办的&#8230; 因为豆瓣太特别了. 在它的basestring里有一个多余的 &#8220;OAuth%2520&#8221; 请求的url之后, 所有参数之前. 百思不得其解这究竟是什么, 难道是历史原因造成的? 总之对于我来说要做的只不过是拼接basestring的时候硬加上去. (至今仍然希望高手解答, 之前的oauth版本里是这样的?)</p>

<p>解决了这个问题还没完, 还有问题. 我尝试使用拿回来的access_token去访问资源, 又报signature错误了. 具体问题我在豆瓣的<a href="http://www.douban.com/group/topic/18667209/">这个帖子</a>里详细描述了, 不过还没有得到答案. 在这个请求中我要不要加上oauth_callback_url这个参数是一回事, 它是不是参加排序又是另外一回事不是么? (至少不该是签名错误吧)</p>

<p>另外还有一个小问题, 豆瓣返回oauth_token=xxx&amp;oauth_token_secret=xxx也是排序错误的, 两个位置对调了. scribe-java是用正则去匹配的, 所以出错了.</p>

<p>总之豆瓣折腾的最疼, 难免心里有些失望.</p>

<p><strong>总结一下</strong></p>

<p>oauth的应用越来越广泛, 互联网企业拿着互联网开发的新年开发着自己的平台, 这是一件很好的事情.</p>

<p>从开发角度来说, 不得不承认oauth并不简单, 我也并不精通oauth, 偷懒了用了别人的库或多或少出现了些问题. 我依然比较郁闷的是, scribe-java本身自己就支持一大堆国外的oauth, 并且在我看来代码都是没有什么问题的, 到了国内, 标准就不是标准了, 标准只是参考, 各家各户按照自己的理解在做. 这篇文章写完, 我也有些心虚, 一些问题可能还是我有错, 如果你发现了, 欢迎拍砖我赔礼道歉.</p>

<p>最后提一下, 在<a href="https://github.com/Arthraim/scribe-java">github上</a>把scribe-java给folk了, 添加了4大门户的微博, 欢迎其他开发者使用或贡献.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011-03-19 技术小记]]></title>
    <link href="http://artori.us/2011-03-19-technical-notes/"/>
    <updated>2011-03-19T23:26:22+08:00</updated>
    <id>http://artori.us/2011-03-19-technical-notes</id>
    <content type="html"><![CDATA[<p>好久木有更新了，碰到一些素材或遇到过的问题都会在evernote里记一下，不过总觉得事情都不够大不足以单独写一篇文章，所以全都一起写一下好了。</p>

<p>在windows下用maven2，遇到一个错：<strong>编码 GBK 的不可映射字符</strong>，原因是windows版的maven2默认编码是GBK。如果有windows的参与者，那解决方法是在pom.xml里加入以下语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>    <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
</span><span class='line'>    <span class="nt">&lt;maven.compiler.encoding&gt;</span>UTF-8<span class="nt">&lt;/maven.compiler.encoding&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外后面一句是在使用mvn compile命令的时候才需要的。</p>

<p>via: <a href="http://wozailongyou.javaeye.com/blog/711664">http://wozailongyou.javaeye.com/blog/711664</a></p>

<hr />

<p>然后是git的一个问题。在某个java工程，git pull 的时候遇到如下错误：</p>

<blockquote><p>error: Untracked working tree file &#8216;webapp/WEB-INF/classes/com/arthraim/foo.class&#8217; would be overwritten by merge. Aborting</p></blockquote>

<p>不小心把.class加入到版本管理，并push到远程了。在另一个本地repo又把他们去掉了，于是就出了类似的错。解决方法大致是移出掉本地的文件（当然如果不是.class这样无所谓的文件的话，不妨备份他们先），并把他们从本地git仓库移出，确保在远程git仓库也移出。</p>

<p>这个问题解决的不是特别干净漂亮，说实话也并没深究。</p>

<hr />

<p>还是一个git的小问题，一直很顺的用 <code>git pull 仓库名 分支名</code> 和 <code>git push 仓库名 分支名</code> 突然有人问起本地分支和远程分支的命名不一样的时候怎么办。。。 还真是查了很久啊。发现原来git pull 语句是这样描述的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git push <span class="o">[</span>远程仓库名<span class="o">]</span> <span class="o">[</span>本地分支<span class="o">]</span> :<span class="o">[</span>远程分支<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个冒号很微妙啊。。以前都是偷懒了用了他的默认。</p>

<p>via: <a href="http://progit.org/book/zh/ch3-5.html">http://progit.org/book/zh/ch3-5.html</a></p>

<hr />

<p>最后一个是freemarker遇到的问题，后端Double类型的数据在freemarker转成string的时候会默认取3位小数，所以这又是和上一个问题类似的被默认耍了的事情。写成下面这样就可以控制最大小数点数位：</p>

<p>${some_double_number?string(0.######)}</p>

<p>&#8217;#&#8217;的数量你懂的。更多具体的选项请看下面的链接。</p>

<p>via: <a href="http://gongstring.javaeye.com/blog/405270">http://gongstring.javaeye.com/blog/405270</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx返回411错误]]></title>
    <link href="http://artori.us/nginx-411-error/"/>
    <updated>2011-02-24T03:26:52+08:00</updated>
    <id>http://artori.us/nginx-411-error</id>
    <content type="html"><![CDATA[<p>今天提交一个form的时候遇到一个411错误, 当时我就孤陋寡闻, 第一次见到411, 查了一下然后就囧了, 是nginx直接把请求给弹回来了. 深入的查一下之后发现这个问题还是非常容易引起的, 于是我当时很奇怪的是在之前的开发中难道从来没有遇到过? 话说也是不良习惯造成的问题, 生产环境测试环境都没有nginx, 唯独产品服务器上是, 糟糕吧.</p>

<h2>引发411的原因</h2>

<p>nginx给出的官方解释有三种情况会引发nginx弹411回去</p>

<ol>
<li>client sent invalid &#8220;Content-Length&#8221; header</li>
<li>client sent … method without &#8220;Content-Length&#8221; header</li>
<li>client sent &#8220;Transfer-Encoding: chunked&#8221; header</li>
</ol>


<p>我的场景是这样的, 用httpclient4(java)去调用一个api服务, 这个api使用的server正是nginx, 使用multipart提交图片文件的时候因为它忽略或省略了文件的真正的长度, 所以(通过firebug发现)在request header里就压根没有Content-Length. 那显然符合上面的第二种情况.</p>

<h2>改代码</h2>

<p>然后我尝试通过修改代码来解决, 自己填充这个header, 但是httpclient很硬气, 我写了一句</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">header</span> <span class="s">httppost.setHeader(&quot;Content-Length&quot;,</span> <span class="s">&quot;0&quot;)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>它直接就报错了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">org.apache.http.ProtocolException:</span> <span class="s">Content-Length</span> <span class="s">header</span> <span class="s">already</span> <span class="s">present</span> <span class="s">at</span> <span class="s">org.apache.http.protocol.RequestContent.process(RequestContent.java:67)</span>  <span class="s">......</span>
</span></code></pre></td></tr></table></div></figure>


<p>看来想在包外面改还不是那么容易, 算了, 继续Google, 一定有合理的办法. <strong>不用改代码.</strong></p>

<h2>重新编译nginx</h2>

<p>于是Google了一圈又看到了<a href="http://www.lamnk.com/blog/computer/fix-nginx-411-length-required-error/">这个文章</a>, 遇到同样的问题, 只是它是上面说到的第三种情况, 不过很幸运的是我意识到解决的方法可能是一样的 &#8211; 给nginx加上一个Chunkin模块. 说干就干, 参考了<a href="http://wiki.nginx.org/NginxHttpChunkinModule#Installation">nginx的wik</a>i和<a href="http://www.shenzhen3c.com/archives/360">这篇文章</a>, 可以顺利的加上外部的模块. 简单来说是以下几步:</p>

<ol>
<li><p>下载新版nginx(或者你还有原来的nginx代码在?), 并下载nginxHttpChunkinModule, 然后解压缩. (下载地址就不帖了, 前者版本更新很快, 后者最近又在开始更新支持DELETE方法了)</p></li>
<li><p><code>nginx -V</code> 查一下之前编译nginx时候的参数, 并且记下来</p></li>
<li><p><code>./configure</code> 并加上一堆参数, 尤其记得要加上 <code>--add-module=/path/to/your/module</code></p></li>
<li><p><code>make</code> (不要马上<code>make install</code>)</p></li>
</ol>


<h2>不停掉nginx, 平滑过渡到新版本</h2>

<p>这才是最最技术的活&#8230; 参考&lt;实战nginx>(in action), 可以简单归纳为以下几步</p>

<ol>
<li><p>备份原来的nginx可执行文件, 比如nginx_bak</p></li>
<li><p><code>cp obj/nginx</code>到旧的nginx可执行文件的位置, 因为它还在跑所以要加上参数 <code>-f</code></p></li>
<li><p><code>kill -USR2 旧版本的nginx主进程号</code> (用<code>ps aux | grep nginx</code>找到, 除了主进程还有一个worker process), 之后再ps会发现一个新的nginx进程被启动, 并且一个新的worker process也开始启动. 这个时候它们同时在工作.</p></li>
<li><p><code>kill - WHINCH 旧版本的nginx主进程号</code> 这会让旧的nginx进程不再处理新的请求, 过一段时间之后再ps, 会看到旧的worker process已经消失停止了. 这时候所有的请求都交给新的nginx在处理了.</p></li>
<li><p><code>kill -QUIT 旧版本的nginx主进程号</code> 退出旧的进程, 新的进程就可以使用了.</p></li>
</ol>


<p>当然这个平滑过渡适用版本升级等各种更换nginx可执行文件的情况, 所以再额外提一下如果发现新版本不好要退回去的时候怎么办.</p>

<ul>
<li><p><code>kill -HUP 旧的nginx主进程号</code> 不reload配置文件就直接重新启动旧的nginx</p></li>
<li><p><code>kill -QUIT 新的nginx主进程号</code> 从容关闭新的Nginx实例</p></li>
<li><p><code>kill -TERM 新的nginx主进程号</code> 这个和上面的可以二选一</p></li>
<li><p>之后可以把之前的nginx_bak重新复制回来覆盖新的</p></li>
</ul>


<p>当然以上都是文明人的做法, 想施暴也是可以的&#8230;</p>

<h2>修改nginx的配置文件</h2>

<p>然后要改一下配置, 使新的模块生效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">chunkin</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">error_page</span> <span class="mi">411</span> <span class="p">=</span> <span class="s">@my_411_error</span><span class="p">;</span>
</span><span class='line'><span class="k">location</span> <span class="s">@my_411_error</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">chunkin_resume</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">location</span> <span class="s">/foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1"># your fastcgi_pass/proxy_pass/set/if and</span>
</span><span class='line'>    <span class="c1"># any other config directives go here...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样改过之后reload nginx就可以正常工作了, 详细配置方法请参考<a href="http://wiki.nginx.org/NginxHttpChunkinModule">wiki</a>谢谢.</p>

<p>那么做到这里之前的问题就解决了, 记录一下, 因为在其他环境下都没遇到类似问题.</p>

<p>以上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011-02-15 小记两笔]]></title>
    <link href="http://artori.us/2011-02-15-notes/"/>
    <updated>2011-02-16T09:02:03+08:00</updated>
    <id>http://artori.us/2011-02-15-notes</id>
    <content type="html"><![CDATA[<p>博客似乎没什么特别的东西好写, 小记一下昨天Google的两个东东, 有用没用稀有不稀有都记录一下. 这样轻松愉快的blog不但记录了成长说不定还对别人有帮助, 对我这种小角色来说还真是不错, hoho</p>

<hr />

<p><strong>第一个: </strong>freemarker遇到个错误</p>

<blockquote><p>Cannot expose session attribute &#8216;business&#8217; because of an existing model object of the same name.</p></blockquote>

<p>好吧我经验不足, 在记录session的时候用到了business这么个名字, 之后又req.setAttribute(&#8220;business&#8221;, XXXX) 了一下, 于是就报错了. 于是教训告诉我session的名字还是变态一点比较好, 经前辈指点, 存取session的地方都要记得给key的名字做个手脚加个前缀.</p>

<hr />

<p><strong>第二个: </strong>logrotate的小配置</p>

<p>logrotate出来的文件总是xxxxx.log.1.gz, 后来又Google了一下, 发现还有一个叫做dateext的参数用YYYYMMDD这样的date extension来代替单调的1234数字. 好吧这个问题真的有点小白 - -</p>

<p>那么, 以上就是全部了~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[优雅的在django框架里使用mongodb]]></title>
    <link href="http://artori.us/use-mongodb-with-django/"/>
    <updated>2011-01-18T03:31:47+08:00</updated>
    <id>http://artori.us/use-mongodb-with-django</id>
    <content type="html"><![CDATA[<p>在我们这里关于ruby和python的争论永远没有停息, 比赛之前也无意间让我发现了很多东西. 这次发现了一个django中使用mongodb的好东西, 叫做<a href="http://mongoengine.org/">mongoengine</a>, 不知道是不是我火星了, 因为从<a href="https://github.com/hmarr/mongoengine">github</a>上看这个项目最早从09年11月就开始了.</p>

<p>在github下载到源码, 有setup.py, 先build再install, 然后&#8230; 开搞!</p>

<p>先很简单的创建一个django的工程(具体不说django), 然后弄个小app或者随便哪里写个view就好了. 然后我用了几步就确定它可以正常使用了.</p>

<p>首先修改settings.py, 原来DATABASES完全不用去管它了, 全部设为空串就好, 然后在文件里加上下面的内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">mongoengine</span> <span class="kn">import</span> <span class="n">connect</span>
</span><span class='line'><span class="n">connect</span><span class="p">(</span><span class="s">&#39;DB_NAME&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在models.py里随便写个模型, 这里要用到mongoengine的一些内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="kn">from</span> <span class="nn">mongoengine</span> <span class="kn">import</span> <span class="n">Document</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestModel</span><span class="p">(</span><span class="n">Document</span><span class="p">):</span>
</span><span class='line'>    <span class="n">test_key</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>    <span class="n">test_value</span> <span class="o">=</span> <span class="n">StringField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>在某个views.py里随便哪里写点逻辑, 添加条数据而已(两种方式都可以填数据)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="n">entry</span> <span class="o">=</span> <span class="n">TestModel</span><span class="p">(</span><span class="n">test_key</span><span class="o">=</span><span class="s">&#39;arthur&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">entry</span><span class="o">.</span><span class="n">test_value</span> <span class="o">=</span> <span class="s">&#39;Wang&#39;</span>
</span><span class='line'><span class="n">entry</span><span class="o">.</span><span class="n">save</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后就可以看看数据输出啦</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="k">for</span> <span class="n">entry</span> <span class="ow">in</span> <span class="n">TestModel</span><span class="o">.</span><span class="n">objects</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">entry</span><span class="o">.</span><span class="n">test_key</span>
</span></code></pre></td></tr></table></div></figure>


<p>好吧, 如果顺利就应该可以看到console输出的结果, 很给力. 当然在mongo中可以查到如下结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>db.testmodel.find<span class="o">()</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;_id&quot;</span> : ObjectId<span class="o">(</span><span class="s2">&quot;4d34267f7ecfdb3b7c000000&quot;</span><span class="o">)</span>, <span class="s2">&quot;test_key&quot;</span> : <span class="s2">&quot;arthur&quot;</span>, <span class="s2">&quot;test_value&quot;</span> : <span class="s2">&quot;Wang&quot;</span>, <span class="s2">&quot;_types&quot;</span> : <span class="o">[</span> <span class="s2">&quot;TestModel&quot;</span> <span class="o">]</span>, <span class="s2">&quot;_cls&quot;</span> : <span class="s2">&quot;TestModel&quot;</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>挺好玩的. 最重要的是它支持sessions, 支持User authentication, 还可以使用gridfs做文件存储, 具体可以在<a href="http://mongoengine.org/docs/v0.4/django.html">这里</a>查到.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arthur的2010年总结]]></title>
    <link href="http://artori.us/arthur-s-2010-summary/"/>
    <updated>2011-01-17T10:58:50+08:00</updated>
    <id>http://artori.us/arthur-s-2010-summary</id>
    <content type="html"><![CDATA[<p>2010年过完了, 博客完整存在的第一年. 无论对我自己还是这个博客都有很多值得总结的地方. 很抱歉这篇文章迟到了, 因为域名和主机等等出现的问题, 从去年年底到这个星期早些时候, 博客都没有正常服务, 知道这周才更换主机和域名后起死回生.</p>

<p>和去年一样, 还是先罗列数据一些数据吧~</p>

<h2>文章的统计数据</h2>

<ul>
<li>January: 12</li>
<li>February: 2</li>
<li>March: 3</li>
<li>April: 8</li>
<li>May: 7</li>
<li>June: 11</li>
<li>July: 3</li>
<li>August: 5</li>
<li>September: 3</li>
<li>October: 3</li>
<li>November: 7</li>
<li>December: 1</li>
</ul>


<p>这样的更新数量好像挺健康的~ 去年一个月将近30篇也太猛了&#8230;</p>

<ul>
<li>Programing: 18</li>
<li>Video Game: 10</li>
<li>Life: 12</li>
<li>internet: 13</li>
<li>Movie: 9</li>
<li>O.S.: 3</li>
<li>I.T.: 2</li>
<li>Book: 0</li>
<li>Music: 0</li>
</ul>


<p>数据和上面的总和有出入, 因为没有细细统计, 看个大概的分类排名就好了. 显然编程还是本博客的主题, 之后生活排在第三位. 读书音乐这两个分类, 实在是觉得不用写在博客上了..</p>

<h2>本人生活相关:</h2>

<ul>
<li>人间网发言: 15815  (截止1月17日2时13分, 没有剥离往年的数据)</li>
<li>新浪微博发言: 1791  (同上)</li>
<li>看书: 2  (记录在豆瓣&#8221;读过&#8221;, &#8220;在读&#8221;中有7本)</li>
<li>电影: 145  (通过豆瓣中&#8221;看过&#8221;计算出来的数据, 误差在10)</li>
<li>美日剧: 190+  (估算, 误差在+-20之内)</li>
<li>动画: 120+  (估算, 看完整了6部新番, 还有其他短小的OVA等)</li>
<li>游戏: (尚未统计, 之后更新&#8230;)</li>
</ul>


<p>2010年, 完成了从学生到社会人的角色转换, 当然心理上到底算不算转换成功了尚且不得而知. 显然看书看得不多, 很多都没有读完. 看了好多好多电影, 在后面9个月都有些中间报告系列, 所以看过的所有电影都记录在案了. 因为工作了所有PS3游戏可以多买几个了, 不过因为飘在上海, 只有周末的时候回到嘉兴的家里玩, 所以其实玩的时候并不多.</p>

<p>应该说这一年技术上的进步是很大的, 因为人间网@niedhui @<a href="http://luosky.com">luosky</a> @caoxg @asfman @oh4mm(按照座位顺序)的帮助以及我自己的学习, 学到的真的很多. 另外还有&#8221;人本设计沙龙&#8221; &#8220;nBazzar(.net)技术沙龙&#8221; 等我参加过的技术社区活动.</p>

<p>博客本身也经历了很多, 从z-blog搬迁到wordpress, 从垃圾虚拟主机到@caoxg的个人服务器(redsaga那台:D)直到今年(2011)搬到了dreamhost. 搬来搬去丢了好多读者好多流量, 不过我还会坚持host它的.</p>

<p>最后要感谢: 除了之前提到的几位, 还要感谢爸妈对我工作的精神支持以及&#8221;月光&#8221;的时候的物质支持, 并且在毕业的时候他们为我提供了很多就业的方向, 不过很抱歉同时也很高兴我朝着自己喜欢的方向前进了. 感谢我的女友@rubyQ童鞋很很多关怀和理解以及对我工作在外的支持, 2010年是我们在一起的第三个年头了. 感谢导师祁亨年帮助我顺利的完成了毕业设计, 感谢动漫社的兄弟姐妹们, 感谢实验室的大牛们, 并感谢所有大学的老师同学们, 没有你们我不能顺利大学毕业啊. 感谢人间团队(爱折客团队)的所有人, 在人间网工作真的很愉快, 见识到了很多, 学到了很多! 感谢博客或微博上关注我, 认识我, 帮助我的网友们, 我和这个博客都离不开你们. 最后感谢所有应该却没有提到的人们~ 感谢你们, 我爱你们<del>~ 感谢祖国, 无论如何我顺利就业了, 祝愿祖国和平繁荣昌盛和谐强大</del></p>

<p>2011继续加油!</p>

<p>最后的最后补放一张Google Analytic的统计报表, 因为很不幸的博客关闭了20天(并更换域名和主机), 所以主要靠Google带流量的本博客2011年的数据几乎是重新开始了. (没有展示的数据比如浏览器操作系统等等欢迎留言提问&#8230;)</p>

<p><a href="http://artori.us/arthur-s-2010-summary/2011-01-17-030351_640x630_scrot/"><img src="http://artori.us/images/uploads/wp/2011-01-17-030351_640x630_scrot-500x492.png" alt="" /></a></p>
]]></content>
  </entry>
  
</feed>
