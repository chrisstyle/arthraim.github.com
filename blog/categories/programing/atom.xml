<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programing | Artoirus]]></title>
  <link href="http://artori.us/blog/categories/programing/atom.xml" rel="self"/>
  <link href="http://artori.us/"/>
  <updated>2013-08-01T09:16:26+08:00</updated>
  <id>http://artori.us/</id>
  <author>
    <name><![CDATA[Arthur Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[WWDC 2013: session 203 What’s New in Cocoa Touch]]></title>
    <link href="http://artori.us/wwdc-2013-session-203-whats-new-in-cocoa-touch/"/>
    <updated>2013-06-19T10:43:00+08:00</updated>
    <id>http://artori.us/wwdc-2013-session-203-whats-new-in-cocoa-touch</id>
    <content type="html"><![CDATA[<p>继续简单贴WWDC的笔记。这个session内容相当多啊。</p>

<p>session 203 关于Cocoa Touch的改动，先看这个也是个人兴趣所致。随着iOS7的大动作，Cocoa Touch的改动真心多，还有更多更多细节可能没发现。</p>

<h3>多任务</h3>

<p>iOS7中多任务是一个重头戏。这里讲到三种。这些改动都是让我非常激动的。</p>

<h4>background fetching | 后台抓取</h4>

<p>这个应该是为了满足类似ping、心跳这样的需求，定时往服务器去抓数据。xcode5的Capabilities设置里，打开Background Modes，可以直接勾选到一个background mode：「Background fetch」。</p>

<p>主要涉及的API如下</p>

<p><code>objective-c
- (void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;
- (void)setMinimumBackgroundFetchInterval:(NSTimeInterval)minInterval;
</code></p>

<h4>remote notifications | 远程通知</h4>

<p>这是个很酷的功能。让app能够在接到一条推送消息的时候后台打开一个下载任务。</p>

<p>例如微信收到新消息推送后打开app，还会有一个连接下载的过程。现在接到推送的同时，就可以在后台把新消息抓过来，打开应用后app已经呈现了这个消息。另外可以想到的更酷的应用，是例如追美剧的那些视频软件，美剧一更新就通过推送把新的一集抓下来，用户下次进入app的时候就可以直接离线看了。</p>

<p>同样Capabilities设置里有一个选项「Remote notifications」</p>

<p><code>objective-c
- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;
</code></p>

<h4>background transfers | 后台传输</h4>

<p>这是个比较基本的功能，发起一个网络请求可以在app切到后台或关闭后继续完成（当然你也可以中端或暂停它）</p>

<p>这里有个变化是Cocoa提供了一个新的类NSURLSession来取代NSURLConnection，这个新类可以快速发起background的请求。请求完成后app可以处理一个回调，展示下载完成的图片或其他资源。更多关于NSURLSession的内容在WWDC session 705「What's new in Foundation Networking」中有更具体的说明。</p>

<p><code>objective-c
- (void)application:(UIApplication *)application handleEventsForBackgroundURLSession:(NSString *)identifier completionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler;
</code></p>

<h3>Views and Images</h3>

<h4>UIImage的renderingMode</h4>

<p><code>- (UIImage *)imageWithRenderingMode:(UIImageRenderingMode)renderingMode;</code> 可以得到一个设置了renderingMode的图片，默认他是auto的，另外它还会有original和template两种绘制模式，后者无视图片中的颜色信息。</p>

<h4>Tint</h4>

<p>现在好像可以很懒惰的处理整个app的风格了，只要设置好tint，各种文字、图标的颜色都会自动切换过去。具体涉及到<code>UIView</code>的<code>tintColor</code>属性以及<code>tintAdjustmentMode</code>属性。而新的代理<code>- (void)tintColorDidChange;</code>可以让你知道tint改变的情况。</p>

<h4>UIView Animation</h4>

<p>iOS7的动画加强了不少。涉及动画的改动也不少。</p>

<p><code>+ (void)performWithoutAnimation:(void (^)(void))actionsWithoutAnimation;</code> 可以强制一些动作不使用动画。不知道之前让我郁闷的要死的<code>UITableViewRowAnimationNone</code>还是有动画的问题能不能解决。</p>

<p>CocoaTouch提供了关键帧动画的API。</p>

<p><code>objective-c
+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion;
- (void)addKeyframeValue:(id)value time:(CGFloat)time;
</code></p>

<p>另外还有Motion Effects，动画可以结合重力感应什么的大概是这样。</p>

<h3>Collection View</h3>

<p>这个是去年的新东西，强大到什么瀑布流、coverflow都能用layout实现。今年提供了一个在layout之间快速切换的方法。数据不变，layout换一下界面从瀑布变coverflow不是梦想。具体细节不纠结了。</p>

<h3>View Controllers</h3>

<p>其实我觉得最担心的就是这个东西。因为可以看到statusbar navigationbar tabbar都是半透明毛玻璃了，我怎么让一个tableview显示在整屏却只在中间区域让用户滚动呢（能滚到中间，不会有cell躲在tabbar下面，但要让tabbar半透明看到滚下去的cell）？</p>

<p>viewcontorller涉及到下面的一些改动。</p>

<h4>wantsFullScreenLayout</h4>

<p>现在的viewcontroller始终保持iOS6设置<code>wantsFullScreenLayout</code>为YES的状态。StatusBar、NavigationBar等等都会变成半透明。真是丧心病狂！然后<code>wantsFullScreenLayout</code>这个属性就没了。因为它被始终设为YES。</p>

<h4>extended edges</h4>

<p>这个extended edges的属性，帮我解决了之前的担心。现在怎么让一个scrollView内容显示在中间部分，却可以滚到那些Bar下面实现半透明，就靠这个属性。让viewcontroller的extended edges变成你要躲开的控件的高度宽度就可以。描述不清楚，你们体会下。orz</p>

<h4>content size</h4>

<p>用<code>preferredContentSize</code>属性来设置你期望的大小，iOS7现在会用它来决定自己的大小。一般应该只有子界面才用得到。</p>

<h4>status bar</h4>

<p>因为全屏，所以现在的statusbar是没有背景颜色的。 <code>UIStatusBarStyleBlackTranslucent</code>和<code>UIStatusBarStyleBlackOpaque</code>两个枚举都被deprecated了。新的<code>UIStatusBarStyleLightContent</code>可以让你设置，万恶的毛玻璃。<code>UIStatusBarStyleDefault</code>不变。</p>

<h4>custom transition</h4>

<p>可以定制transition。比如navigation的push pop，viewController的present dismiss，或者手势控制的各种。另外新的代理<code>UIViewControllerTransitioningDelegate</code>（viewcontroller有相应属性）和新的protocol<code>UIViewControllerAnimatedTransitioning</code>、<code>UIViewControllerInteractiveTransitioning</code>、<code>UIViewControllerContextTransitioning</code>，具体的方法文档有，不知道用到的机会有多少。</p>

<h3>状态恢复</h3>

<p>现在新的App状态恢复，系统会给你截一张图，让你的程序的恢复变得无缝。</p>

<p>但事实上，很有可能截图和应用恢复后实际的数据或界面不一样，于是你可以用新的方法<code>- (void)ignoreSnapshotOnNextApplicationLaunch;</code>屏蔽之前的截图。</p>

<p>另外你可以用<code>+ (void) registerObjectForStateRestoration:(id&lt;UIStateRestoring&gt;)object restorationIdentifier:(NSString *)restorationIdentifier;</code>把<strong>和界面无关</strong>的数据对象保存下来。</p>

<p>蓝牙状态也可以恢复，这一块不太熟悉，总之系统帮你保存了一些状态，有两个新的key让你取到他们。</p>

<h3>AirDrop</h3>

<p>这个session里笼统的说了一下，你可以注册protocol，每个app沙箱多了一个inbox目录等等，不深入了（视频里也没深入说啊）。</p>

<h3>Dynamics</h3>

<p>「Getting started with UIKit Dynamics」和「Advanced Techniques with UIKit Dynamics」两个session详细介绍了这一块。</p>

<p>具体这货就是让你做一些效果，两个view粘在一起，view带上物理特效，碰撞、重力感应什么的高级货。</p>

<ul>
<li><code>UIDynamicAnimator</code> 操作一些动画的模型</li>
<li><code>UIDynamicBehavior</code> 记录各种动作的一棵树</li>
<li><code>UIDynamicItem</code> 这个protocol让控件变成你要操作的对象</li>
</ul>


<h3>Text</h3>

<p>iOS7的设置里，用户可以用一个滑槽修改字体大小了。</p>

<p>开发者可以用<code>UIApplication</code>的<code>preferredContentSizeCategory</code>属性取到用户设置的字体大小。</p>

<p>取到的值是一个<code>UIContentSizeCategorySize...</code>枚举，有XS、S、M、L、XL、XXL、XXXL几个档次。</p>

<p>用户修改这个设置的时候，会发送一个notification: <code>UIContentSizeCategoryDidChangeNotification</code>，使用新的key<code>UIContentSizeCategoryNewValueKey</code>可以从notification中取到修改后的字体大小。</p>

<p>另外<code>+ (UIFont *)preferedFontForTextStyle:(NSString *)style;</code>方法可以用「标题文字」「正文文字」这样的形式来获得一些固定的UIFont。</p>

<h3>Text Kit</h3>

<p>这是一个全新的Kit，基于CoreText。具体「Introducing Text Kit」和「Advanced Text Layouts and Effects with Text Kit」以及「Using fonts with Text Kit」三个session涉及到这一块。</p>

<p>这货大致有三个类</p>

<ul>
<li><code>NSTextContainer</code> 是最外面文字布局的容器</li>
<li><code>NSLayoutManager</code> 是内部的布局</li>
<li><code>NSTextStorage</code> 文字的数据</li>
</ul>


<p>修改文字布局只要按需要派生其中一层就可以，还有个<code>NSTextAttachment</code>可以图文混排什么的。细节跳过。</p>

<h3>More</h3>

<p>Session最后提到了其他一下CocoaTouch的修改，罗列一下。</p>

<ul>
<li>Local networking</li>
<li>Sprite Kit</li>
<li>game controllers</li>
<li>MapKit</li>
<li>CoreLocation</li>
<li>game center

<ul>
<li>new turn based api (like letter press)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WWDC 2013: session 404 advances in objective-c]]></title>
    <link href="http://artori.us/wwdc-2013-session-404-advances-in-objective-c/"/>
    <updated>2013-06-18T10:27:00+08:00</updated>
    <id>http://artori.us/wwdc-2013-session-404-advances-in-objective-c</id>
    <content type="html"><![CDATA[<p>看了几个WWDC的session，做了一些笔记，简单贴在博客上吧。</p>

<p>404这个session大概说了objective-c的一些变化，和去年比起来改动实在是不多。</p>

<h3>module</h3>

<p>这个改动比较引人瞩目，简单说就是写#import的时候改成@import。#include是复制粘帖，#import是#define保护下复制粘帖，@import则用了一个结构去维护。</p>

<p>在工程设置里，把「Enable Modules (C and Objective-C)」设为YES，不用改代码就能自动生效。会提高编译和索引的速度。</p>

<p>有一句话很刺眼叫「not available for user frameworks」，呵呵。</p>

<p>另外随之而来的Auto Linking特性，你不用自己去加那些依赖了。</p>

<h3>refactor tools</h3>

<p>重构工具什么的，然后又提了提literals的语法什么的。说起后者今天看到<a href="http://nshipster.com/object-subscripting/">一篇文章</a>，把object subscripting（这货就是比如说array[@3], dictionary[@"key"]这样）扩展成一门DSL。</p>

<h3>instancetype</h3>

<p>这个改动我觉得挺重要。以前方法（尤其init）返回一个指针的时候用<code>id</code>作为类型。编译器其实很难（几乎不能）对它的类型作出判断。新增这个instancetype来声明返回值类型，可以避免很多不安全的问题。</p>

<p>比如Foo的init方法返回一个NSArray，调用的时候写成<code>NSDictionary *dict = [[Foo alloc] init];</code>。如果init方法是<code>-(id)init</code>，那编译器啥也不知道。如果改写成<code>-(instancetype)init</code>，xcode会警告你这里类型有问题了。</p>

<h3>explicitly-typed enums</h3>

<p><code>cell.selectionStyle = UITableViewCellAccessoryCheckmark</code>这种不同枚举类型的赋值会得到一个警告了。另外xcode的自动完成也更智能了。别忘了用<code>NS_ENUM</code>这个宏来写枚举哟。</p>

<h3>runtime</h3>

<p>有一些改动，比如新的tagged pointer，以及使用isa的警告等等。下一节还提到了一些retain环的警告等等等等。</p>

<h3>GC -> ARC</h3>

<p>苹果不要GC了，都用ARC了，包括Xcode 5在内的一些工程都放弃GC了。</p>

<p>另外ARC还有些进化。<code>__weak</code>更快了，说是x2快。dubug的<code>autorelease</code>处理更接近release build了。</p>

<h3>CF bridge</h3>

<p>CoreFoundation框架的桥也全都优化了，提到implicit bridging的时候全场掌声，本人level太低不理解什么意思。</p>

<p>笔记大概就是这些，感觉很多都没怎么听懂，还需要补课。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[快速使用uwsgi部署]]></title>
    <link href="http://artori.us/easy-deploy-with-uwsgi/"/>
    <updated>2013-04-14T01:02:00+08:00</updated>
    <id>http://artori.us/easy-deploy-with-uwsgi</id>
    <content type="html"><![CDATA[<p>之前尝试在阿里云部署一个bottle.py写的web服务，选择了unbuntu12.04，一穷二白的ubuntu上用uwsgi部署还挺简单的。这里简单记录一下。</p>

<p>先要改一改程序代码，声明一个application</p>

<p><code>py
application = bottle.app()
</code></p>

<p>然后安装uwsgi，demo.py就是修改过的bottle的代码。</p>

<p>这里我遇到了<code>— unavailable modifier requested: 0 --</code>，要安装uwsgi-plugin-python，并且uwsgi启动时候添加<code>--plugin python</code></p>

<p>一些uwsgi的操作看<a href="http://uwsgi-docs.readthedocs.org/en/latest/Management.html">这里</a></p>

<p><code>sh
apt-get install uwsgi uwsgi-plugin-python
uwsgi --socket :8000 --plugin python --file demo.py --processes 4 --pidfile /tmp/demo.pid --touch-reload=/tmp/restart -d uwsgi.log
</code></p>

<p>安装nginx</p>

<p><code>sh
apt-get install libpcre3 libpcre3-dbg libpcre3-dev
apt-get install zlib1g zlib1g-dbg zlib1g-dev
apt-get install make
cd /path/to/nginx
./configure
make
make install
</code></p>

<p>最后配置nginx。默认安装路径在<code>/usr/local/nginx/conf/nginx.conf</code></p>

<p>```js
server {</p>

<pre><code>listen       80;
server_name  demo.artori.us;

location /static/ { alias /home/root/demo/static/; }

location / {
    uwsgi_pass      127.0.0.1:8000;
    include         uwsgi_params;
}
</code></pre>

<p>}
```</p>

<p>自此搞定</p>

<p>via:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/10748108/nginx-uwsgi-unavailable-modifier-requested-0">http://stackoverflow.com/questions/10748108/nginx-uwsgi-unavailable-modifier-requested-0</a></li>
<li><a href="http://lists.unbit.it/pipermail/uwsgi/2011-November/002923.html">http://lists.unbit.it/pipermail/uwsgi/2011-November/002923.html</a></li>
<li><a href="http://aaronsnow.tumblr.com/post/11560674160/nginx-uwsgi-bottle-py">http://aaronsnow.tumblr.com/post/11560674160/nginx-uwsgi-bottle-py</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!topic/bottlepy/wRfgm4obLXk">https://groups.google.com/forum/?fromgroups=#!topic/bottlepy/wRfgm4obLXk</a></li>
<li><a href="http://blog.felixc.at/2011/01/ubuntu-uwsgi-nginx-bottle-configuration/">http://blog.felixc.at/2011/01/ubuntu-uwsgi-nginx-bottle-configuration/</a></li>
<li><a href="http://apt-blog.net/moinmoin-on-nginx-via-fastcgi-and-uwgi">http://apt-blog.net/moinmoin-on-nginx-via-fastcgi-and-uwgi</a></li>
<li><a href="http://down.chinaz.com/server/201112/1467_1.htm">http://down.chinaz.com/server/201112/1467_1.htm</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIWebView加载本地资源]]></title>
    <link href="http://artori.us/uiwebview-load-local-javascript/"/>
    <updated>2013-03-27T18:19:00+08:00</updated>
    <id>http://artori.us/uiwebview-load-local-javascript</id>
    <content type="html"><![CDATA[<p>作为一个不会javascript只会jQuery的程序员，我在做<a href="https://github.com/Arthraim/objs">Objective-c和HTML5页面交互的demo</a>的时候需要HTML至少依赖一个jQuery，放在本地咋整？</p>

<h2>创建UIWebView的时候</h2>

<p>```objective-c
_webView = [[UIWebView alloc] initWithFrame:CGRectMake(0,0,self.view.bounds.size.width,self.view.bounds.size.height)];
NSString <em>htmlFile = [[NSBundle mainBundle] pathForResource:@"index" ofType:@"html"];
NSString</em> htmlString = [NSString stringWithContentsOfFile:htmlFile encoding:NSUTF8StringEncoding error:nil];</p>

<p>NSString <em>path = [[NSBundle mainBundle] bundlePath];
NSURL </em>baseURL = [NSURL fileURLWithPath:path];</p>

<p>[<em>webView loadHTMLString:htmlString baseURL:baseURL];
// 把baseURL知道bundle的Url，就能调用bundle里的其他文件了，图片音乐什么的
[self.view addSubview:</em>webView];
[_webView release];
```</p>

<h2>添加.js文件的时候</h2>

<p>添加js文件有点特殊，xcode会以为js是可以编译的代码。要在Xcode的target里，把.js文件从 "Compile Sources" 移到 "Copy Bundle Resources" .</p>

<h2>写HTML的时候</h2>

<p>可以直接写相对路径了。<code>&lt;script src="jquery.min.js"&gt;&lt;/script&gt;</code></p>

<p><strong>题外话1</strong>: 有个基友要做一个HTML5播放视频的东东，想把视频缓存到本地，但是UIWebView无视HTML5 mainifest里指定的音频视频文件，还有5M的限制。其实也可以存下来本地加载撒。</p>

<p><strong>题外话2</strong>: objc可以用stringByEvaluatingJavaScriptFromString:在webview里执行脚本。js要调用objective-c就比较麻烦。iOS可行的办法是利用custom URL scheme，跳转到应用之后应用或从path或从querystring来判断js要调用什么类什么方法，比较蛋疼。最理想的方式应该是<a href="https://developer.apple.com/library/mac/#documentation/AppleApplications/Conceptual/SafariJSProgTopics/Tasks/ObjCFromJavaScript.html">safari插件支持的方式</a>，可惜iOS没有。</p>

<p>via:</p>

<ul>
<li><a href="https://devforums.apple.com/message/32282">https://devforums.apple.com/message/32282</a></li>
<li><a href="http://mentormate.com/blog/iphone-uiwebview-class-local-css-javascript-resources/">http://mentormate.com/blog/iphone-uiwebview-class-local-css-javascript-resources/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bottle直接返回pymongo查询结果]]></title>
    <link href="http://artori.us/bottle-autojson-with-pymongo/"/>
    <updated>2012-12-19T10:32:00+08:00</updated>
    <id>http://artori.us/bottle-autojson-with-pymongo</id>
    <content type="html"><![CDATA[<p>以前提到过<a href="/bottle-i-love-this-framework/">bottle</a>，也写过在<a href="/use-mongodb-with-django/">django里使用pymongo</a>，这次是在bottle里用pymongo。</p>

<p>bottle有类似ROR的一些特性，比如处理请求的时候直接return一个字典，框架会自动把它parse成json（autojson）。</p>

<p>我是想偷个懒来着，把代码写成了下面这样。</p>

<p>```py
@get('/api/today')
def api_today():</p>

<pre><code>udid = request.GET.get('udid')
return self.coll.find_one({'udid':udid, 'date':today})
</code></pre>

<p>```</p>

<p>这会有问题，因为find_one返回的bson没办法直接parse。伟大的发明都是在偷懒的时候诞生的，看起来我要做的事情也很简单，只要能让我改一改parser就行了。</p>

<ol>
<li>写一个dump方法替换原来JSONPlugin里的</li>
<li>设置Bottle app的autojson为False。<code>Bottle(autojson=False)</code></li>
<li>把有自己dump方法的JSONPlugin给install到app里</li>
</ol>


<p>```py
class MongoEncoder(JSONEncoder):</p>

<pre><code>def mongo_dumps(obj):
    # convert all iterables to lists
    if hasattr(obj, '__iter__'):
        return list(obj)
    # convert cursors to lists
    elif isinstance(obj, pymongo.cursor.Cursor):
        return list(obj)
    # convert ObjectId to string
    elif isinstance(obj, bson.objectid.ObjectId):
        return unicode(obj)
    # dereference DBRef
    elif isinstance(obj, bson.dbref.DBRef):
        return db.dereference(obj) # db is the incetance database
    # convert dates to strings
    elif isinstance(obj, datetime.datetime) or isinstance(obj, datetime.date) or isinstance(obj, datetime.time):
        return unicode(obj)
    return json.JSONEncoder.default(self, obj)
</code></pre>

<p>app = app()
app.autojson = False
m_encoder = MongoEncoder()
app.install(JSONPlugin(json_dumps=lambda s: dumps(s, default=m_encoder.mongo_dumps)))
```</p>

<p>via:</p>

<ul>
<li><a href="https://github.com/defnull/bottle/issues/287">https://github.com/defnull/bottle/issues/287</a></li>
<li><a href="https://gist.github.com/2779820">https://gist.github.com/2779820</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
